# -*- coding: utf-8 -*-
"""Copy of submission2-time-series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gGE25HyJhGPzZIEAwXlT9pZseCwNety4

Author : Iklima Mardiana

Dataset : https://www.kaggle.com/datasets/szrlee/stock-time-series-20050101-to-20171231
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

df = pd.read_csv('BA_2006-01-01_to_2018-01-01.csv')
df

df.isna().sum()

df.dropna(axis=0, inplace=True)

dates = df['Date'].values
stock = df['High'].values

plt.figure(figsize=(15,5))
plt.plot(dates, stock)
plt.title('Time Series of Stock Highs',
          fontsize=20);

df['Date'] = pd.to_datetime(df['Date'])
dataset = df.set_index('Date')

stock = stock.reshape(-1,1)
stock

scaler = MinMaxScaler()
stock = scaler.fit_transform(stock)

X_train, X_test, y_train, y_test = train_test_split(stock, dates,
                                                    test_size=0.2,
                                                    shuffle=False)

print('Number of Data Train : ',len(X_train))
print('Number of Data Validation : ',len(X_test))

"""mengubah data menjadi format yang dapat diterima oleh model"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(X_train, window_size=60, batch_size=64, shuffle_buffer=1000)
test_set  = windowed_dataset(X_test, window_size=128, batch_size=64, shuffle_buffer=1000)

"""Arsitektur model menggunakan 2 buah layer LSTM"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(65, return_sequences=True, input_shape = [None, 1]),
  tf.keras.layers.LSTM(65),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

threshold_mae = (stock.max() - stock.min()) * 10/100
print(threshold_mae)

"""mengimplementasikan callback ketika MAE < 10%"""

class myCallback(tf.keras.callbacks.Callback):
  def __init__(self, min_epochs=10):
    self.min_epochs = min_epochs
    self.epochs_passed = 0

  def on_epoch_end(self, epoch, logs={}):
    self.epochs_passed += 1

    if self.epochs_passed >= self.min_epochs and logs.get('mae') < threshold_mae:
      print(f"MAE < 10% after {self.epochs_passed} epochs.")
      self.model.stop_training = True

callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set,
                    epochs=100,
                    validation_data=test_set,
                    verbose=2,
                    callbacks=[callbacks])

plt.figure(figsize=(10, 6))
plt.plot(history.history['mae'], label='Training MAE')
plt.plot(history.history['val_mae'], label='Validation MAE')
plt.title('Training and Validation MAE')
plt.xlabel('Epoch')
plt.ylabel('MAE')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()